# Generated by Copilot

"""
AI Chunk Service Demo
Demonstrates how to use AI chunking service with Vietnamese legal documents
"""

import asyncio
import json
import requests
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))

MCP_SERVER_URL = "http://localhost:3001"


def load_sample_law_text():
    """Load a sample from the Vietnamese Accounting Law"""

    # Sample from ƒêi·ªÅu 13 - Prohibited acts in accounting
    sample_text = """
    ƒêi·ªÅu 13. Nh·ªØng h√†nh vi b·ªã nghi√™m c·∫•m trong k·∫ø to√°n
    
    1. L√†m gi·∫£ ch·ª©ng t·ª´ k·∫ø to√°n, s·ªï k·∫ø to√°n, b√°o c√°o t√†i ch√≠nh v√† c√°c t√†i li·ªáu k·∫ø to√°n kh√°c.
    
    2. C·ªë √Ω l√†m sai l·ªách s·ªë li·ªáu k·∫ø to√°n, b√°o c√°o t√†i ch√≠nh.
    
    3. Che gi·∫•u, ti√™u h·ªßy b·∫•t h·ª£p ph√°p ch·ª©ng t·ª´ k·∫ø to√°n, s·ªï k·∫ø to√°n v√† c√°c t√†i li·ªáu k·∫ø to√°n kh√°c.
    
    4. Cung c·∫•p, c√¥ng b·ªë th√¥ng tin k·∫ø to√°n, b√°o c√°o t√†i ch√≠nh sai s·ª± th·∫≠t.
    
    5. L·ª£i d·ª•ng ch·ª©c v·ª•, quy·ªÅn h·∫°n can thi·ªáp tr√°i ph√©p v√†o c√¥ng vi·ªác k·∫ø to√°n c·ªßa ƒë∆°n v·ªã k·∫ø to√°n.
    
    6. C√°c h√†nh vi kh√°c vi ph·∫°m ph√°p lu·∫≠t v·ªÅ k·∫ø to√°n.
    """

    return sample_text.strip()


def test_server_connection():
    """Test if MCP server is running"""
    try:
        response = requests.get(f"{MCP_SERVER_URL}/health", timeout=5)
        return response.status_code == 200
    except:
        return False


def demo_keyword_extraction(text):
    """Demo keyword extraction from Vietnamese legal text"""
    print("üè∑Ô∏è  Keyword Extraction Demo")
    print("-" * 40)

    try:
        response = requests.post(
            f"{MCP_SERVER_URL}/call-tool",
            json={
                "name": "ai_chunk.ai_chunk_extract_keywords",
                "arguments": {"text": text, "maxKeywords": 8, "language": "vi"},
            },
            timeout=30,
        )

        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Keywords extracted successfully:")

            keywords = result.get("keywords", [])
            for i, kw in enumerate(keywords, 1):
                keyword = kw.get("keyword", "unknown")
                relevance = kw.get("relevance", 0)
                frequency = kw.get("frequency", 0)
                print(
                    f"   {i}. {keyword} (relevance: {relevance:.2f}, frequency: {frequency})"
                )

            print(f"\nüìä Total keywords: {result.get('totalKeywords', 0)}")
            print(f"üåê Language: {result.get('language', 'unknown')}")

        else:
            print(f"‚ùå Failed: {response.status_code} - {response.text}")

    except Exception as e:
        print(f"‚ùå Error: {e}")


def demo_document_analysis(text):
    """Demo document structure analysis"""
    print("\nüìä Document Analysis Demo")
    print("-" * 40)

    try:
        response = requests.post(
            f"{MCP_SERVER_URL}/call-tool",
            json={
                "name": "ai_chunk.ai_chunk_analyze_structure",
                "arguments": {"text": text, "language": "vi"},
            },
            timeout=30,
        )

        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Document analysis completed:")

            print(f"   Language: {result.get('language', 'unknown')}")
            print(f"   Document Type: {result.get('documentType', 'unknown')}")

            sections = result.get("sections", [])
            print(f"   Sections found: {len(sections)}")

            for i, section in enumerate(sections[:3], 1):  # Show first 3 sections
                section_type = section.get("type", "unknown")
                content_preview = section.get("content", "")[:50] + "..."
                print(f"     {i}. {section_type}: {content_preview}")

            metadata = result.get("metadata", {})
            print(f"\nüìà Metadata:")
            print(f"   Total sections: {metadata.get('totalSections', 0)}")
            print(f"   Reading time: {metadata.get('estimatedReadingTime', 0)} minutes")
            print(f"   Complexity: {metadata.get('complexity', 'unknown')}")

        else:
            print(f"‚ùå Failed: {response.status_code} - {response.text}")

    except Exception as e:
        print(f"‚ùå Error: {e}")


def demo_smart_chunking(text):
    """Demo AI-powered smart chunking"""
    print("\nüß† Smart Chunking Demo")
    print("-" * 40)

    try:
        response = requests.post(
            f"{MCP_SERVER_URL}/call-tool",
            json={
                "name": "ai_chunk.ai_chunk_smart_chunk",
                "arguments": {
                    "text": text,
                    "chunkSize": 400,
                    "overlap": 50,
                    "language": "vi",
                    "preserveStructure": True,
                    "documentType": "legal",
                },
            },
            timeout=60,
        )

        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Smart chunking completed:")

            total_chunks = result.get("totalChunks", 0)
            avg_size = result.get("averageChunkSize", 0)

            print(f"   Total chunks: {total_chunks}")
            print(f"   Average chunk size: {avg_size} characters")

            metadata = result.get("metadata", {})
            print(f"   Original length: {metadata.get('originalLength', 0)} characters")
            print(f"   Processing time: {metadata.get('processingTime', 0)}ms")
            print(f"   Detected language: {metadata.get('language', 'unknown')}")

            # Show details of first chunk
            chunks = result.get("chunks", [])
            if chunks:
                first_chunk = chunks[0]
                print(f"\nüìÑ First chunk details:")
                print(f"   ID: {first_chunk.get('id', 'unknown')}")
                print(f"   Size: {len(first_chunk.get('content', ''))} characters")
                print(f"   Content preview: {first_chunk.get('content', '')[:100]}...")

                chunk_metadata = first_chunk.get("metadata", {})
                if chunk_metadata.get("keywords"):
                    print(
                        f"   Keywords: {', '.join(chunk_metadata['keywords'][:3])}..."
                    )
                if chunk_metadata.get("summary"):
                    print(f"   Summary: {chunk_metadata['summary'][:80]}...")
                print(f"   Importance: {chunk_metadata.get('importance', 'unknown')}")

        else:
            print(f"‚ùå Failed: {response.status_code} - {response.text}")

    except Exception as e:
        print(f"‚ùå Error: {e}")


def demo_summary_generation(text):
    """Demo text summarization"""
    print("\nüìù Summary Generation Demo")
    print("-" * 40)

    try:
        response = requests.post(
            f"{MCP_SERVER_URL}/call-tool",
            json={
                "name": "ai_chunk.ai_chunk_generate_summary",
                "arguments": {"text": text, "maxLength": 200, "language": "vi"},
            },
            timeout=30,
        )

        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Summary generated successfully:")

            summary = result.get("summary", "")
            print(f"   Summary: {summary}")

            print(f"\nüìä Statistics:")
            print(f"   Original length: {result.get('originalLength', 0)} characters")
            print(f"   Summary length: {result.get('summaryLength', 0)} characters")
            print(f"   Compression ratio: {result.get('compressionRatio', 0)}%")
            print(f"   Language: {result.get('language', 'unknown')}")

        else:
            print(f"‚ùå Failed: {response.status_code} - {response.text}")

    except Exception as e:
        print(f"‚ùå Error: {e}")


def main():
    """Main demo function"""
    print("üöÄ AI Chunk Service Demo")
    print("Demonstrating Vietnamese legal document processing")
    print("=" * 60)

    # Check server connection
    if not test_server_connection():
        print("‚ùå Cannot connect to MCP server at http://localhost:3001")
        print("Please ensure the server is running with:")
        print("   cd mcp-server && node dist/server.js --http --port 3001")
        return

    print("‚úÖ Connected to MCP server")

    # Load sample text
    sample_text = load_sample_law_text()
    print(f"\nüìñ Sample text loaded ({len(sample_text)} characters)")
    print("Content preview:")
    print(f"   {sample_text[:150]}...")

    # Run demos
    try:
        demo_keyword_extraction(sample_text)
        demo_document_analysis(sample_text)
        demo_summary_generation(sample_text)
        demo_smart_chunking(sample_text)

        print("\n" + "=" * 60)
        print("üéâ Demo completed successfully!")
        print("\nüí° Use cases for AI Chunk Service:")
        print("   ‚Ä¢ Legal document processing and analysis")
        print("   ‚Ä¢ Intelligent text chunking for vector databases")
        print("   ‚Ä¢ Vietnamese content summarization")
        print("   ‚Ä¢ Keyword extraction for search optimization")
        print("   ‚Ä¢ Document structure analysis for automation")

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Demo interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")


if __name__ == "__main__":
    main()
