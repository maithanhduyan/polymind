# Generated by Copilot
from qdrant_client import QdrantClient
from qdrant_client.models import Distance, VectorParams, PointStruct
from qdrant_client.http.exceptions import ResponseHandlingException

"""
Demo Qdrant v·ªõi error handling

C√ÅCH 1: Ch·∫°y Qdrant server v·ªõi Docker:
docker run -p 6333:6333 qdrant/qdrant

C√ÅCH 2: S·ª≠ d·ª•ng in-memory client (kh√¥ng c·∫ßn server)
"""


def demo_with_server():
    """Demo v·ªõi Qdrant server"""
    try:
        # K·∫øt n·ªëi ƒë·∫øn Qdrant server
        client = QdrantClient("localhost", port=6333)

        # Test connection
        client.get_collections()
        print("‚úÖ K·∫øt n·ªëi Qdrant server th√†nh c√¥ng!")

        collection_name = "demo_collection"

        # Ki·ªÉm tra v√† t·∫°o collection (c√°ch m·ªõi, kh√¥ng deprecated)
        if client.collection_exists(collection_name):
            client.delete_collection(collection_name)
            print(f"üóëÔ∏è ƒê√£ x√≥a collection c≈©: {collection_name}")

        client.create_collection(
            collection_name=collection_name,
            vectors_config=VectorParams(size=4, distance=Distance.COSINE),
        )
        print(f"üì¶ ƒê√£ t·∫°o collection: {collection_name}")

        return client, collection_name

    except ResponseHandlingException as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Qdrant server: {e}")
        print("üí° H√£y ch·∫°y: docker run -p 6333:6333 qdrant/qdrant")
        return None, None


def demo_in_memory():
    """Demo v·ªõi in-memory client (kh√¥ng c·∫ßn server)"""
    print("üß† S·ª≠ d·ª•ng Qdrant in-memory mode...")
    client = QdrantClient(":memory:")

    collection_name = "demo_collection"

    client.create_collection(
        collection_name=collection_name,
        vectors_config=VectorParams(size=4, distance=Distance.COSINE),
    )
    print(f"üì¶ ƒê√£ t·∫°o in-memory collection: {collection_name}")

    return client, collection_name


def run_demo():
    """Ch·∫°y demo v·ªõi fallback"""
    # Th·ª≠ k·∫øt n·ªëi server tr∆∞·ªõc
    client, collection_name = demo_with_server()

    # N·∫øu kh√¥ng c√≥ server, d√πng in-memory
    if client is None:
        client, collection_name = demo_in_memory()

    # Ki·ªÉm tra client v√† collection_name kh√¥ng None
    if client is None or collection_name is None:
        print("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Qdrant client")
        return

    # D·ªØ li·ªáu demo
    points = [
        PointStruct(id=1, vector=[0.1, 0.2, 0.3, 0.4], payload={"name": "point 1"}),
        PointStruct(id=2, vector=[0.2, 0.1, 0.4, 0.3], payload={"name": "point 2"}),
        PointStruct(id=3, vector=[0.9, 0.8, 0.7, 0.6], payload={"name": "point 3"}),
    ]

    # Th√™m d·ªØ li·ªáu v√†o Qdrant
    client.upsert(collection_name=collection_name, points=points)
    print(f"üì§ ƒê√£ th√™m {len(points)} ƒëi·ªÉm v√†o collection")

    # Vector query: t√¨m ƒëi·ªÉm g·∫ßn nh·∫•t
    query_vector = [0.1, 0.2, 0.3, 0.39]
    search_result = client.search(
        collection_name=collection_name,
        query_vector=query_vector,
        limit=2,  # l·∫•y 2 ƒëi·ªÉm g·∫ßn nh·∫•t
    )

    print("\nüîç K·∫øt qu·∫£ t√¨m ki·∫øm:")
    for hit in search_result:
        print(f"  ID: {hit.id}, Score: {hit.score:.4f}, Payload: {hit.payload}")

    print(f"\n‚úÖ Demo Qdrant ho√†n th√†nh th√†nh c√¥ng!")


if __name__ == "__main__":
    run_demo()
