# Generated by Copilot
"""
Test client ƒë·ªÉ h·ªèi ƒë√°p v·ªõi DeepSeek AI qua WebSocket

Ki·ªÉm tra xem DeepSeek agent c√≥ ho·∫°t ƒë·ªông ƒë√∫ng kh√¥ng.
"""

import asyncio
import json
import websockets
from typing import Dict, Any


class DeepSeekTestClient:
    """Client ƒë·ªÉ test DeepSeek agent qua WebSocket."""

    def __init__(self, ws_url: str = "ws://127.0.0.1:8000/ws/chat"):
        self.ws_url = ws_url
        self.websocket = None

    async def connect(self) -> bool:
        """K·∫øt n·ªëi ƒë·∫øn WebSocket server."""
        try:
            self.websocket = await websockets.connect(self.ws_url)
            print(f"‚úÖ ƒê√£ k·∫øt n·ªëi ƒë·∫øn {self.ws_url}")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            return False

    async def send_message(self, message: str, agent: str = "deepseek") -> None:
        """G·ª≠i tin nh·∫Øn ƒë·∫øn DeepSeek agent."""
        if not self.websocket:
            print("‚ùå Ch∆∞a k·∫øt n·ªëi WebSocket")
            return

        message_data = {
            "content": message,
            "agent": agent,
            "timestamp": "2025-06-20T15:31:00Z",
        }

        print(f"üì§ G·ª≠i tin nh·∫Øn: {message}")
        await self.websocket.send(json.dumps(message_data))

    async def receive_response(self) -> Dict[str, Any]:
        """Nh·∫≠n ph·∫£n h·ªìi t·ª´ server."""
        if not self.websocket:
            print("‚ùå Ch∆∞a k·∫øt n·ªëi WebSocket")
            return {}

        try:
            response = await asyncio.wait_for(self.websocket.recv(), timeout=30.0)
            data = json.loads(response)
            print(f"üì• Nh·∫≠n ph·∫£n h·ªìi: {data.get('type', 'unknown')}")
            return data
        except asyncio.TimeoutError:
            print("‚è∞ Timeout - kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi trong 30s")
            return {}
        except Exception as e:
            print(f"‚ùå L·ªói nh·∫≠n ph·∫£n h·ªìi: {e}")
            return {}

    async def chat_session(self, questions: list[str]) -> None:
        """Th·ª±c hi·ªán session chat v·ªõi nhi·ªÅu c√¢u h·ªèi."""
        for i, question in enumerate(questions, 1):
            print(f"\nüîπ C√¢u h·ªèi {i}: {question}")

            # G·ª≠i c√¢u h·ªèi
            await self.send_message(question)

            # Ch·ªù ph·∫£n h·ªìi
            response = await self.receive_response()

            if response:
                if response.get("type") == "response":
                    content = response.get("content", "")
                    agent = response.get("agent", "unknown")
                    model = response.get("model", "unknown")

                    print(f"ü§ñ Agent: {agent} (Model: {model})")
                    print(f"üí¨ Ph·∫£n h·ªìi: {content[:200]}...")

                elif response.get("type") == "error":
                    print(f"‚ùå L·ªói: {response.get('message', 'Unknown error')}")

                else:
                    print(f"‚ÑπÔ∏è Lo·∫°i ph·∫£n h·ªìi kh√°c: {response}")

            # Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc c√¢u h·ªèi ti·∫øp theo
            if i < len(questions):
                await asyncio.sleep(2)

    async def close(self) -> None:
        """ƒê√≥ng k·∫øt n·ªëi WebSocket."""
        if self.websocket:
            await self.websocket.close()
            print("üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi WebSocket")


async def test_deepseek_basic() -> None:
    """Test c∆° b·∫£n v·ªõi DeepSeek agent."""
    client = DeepSeekTestClient()

    # Danh s√°ch c√¢u h·ªèi test
    test_questions = [
        "Xin ch√†o! B·∫°n c√≥ th·ªÉ gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n kh√¥ng?",
        "H√£y gi·∫£i th√≠ch kh√°i ni·ªám AI v√† machine learning b·∫±ng ti·∫øng Vi·ªát",
        "Vi·∫øt m·ªôt ƒëo·∫°n code Python ƒë∆°n gi·∫£n ƒë·ªÉ t√≠nh fibonacci",
        "Ph√¢n t√≠ch ∆∞u nh∆∞·ª£c ƒëi·ªÉm c·ªßa DeepSeek V3",
        "C·∫£m ∆°n b·∫°n ƒë√£ tr·∫£ l·ªùi!",
    ]

    try:
        # K·∫øt n·ªëi
        if not await client.connect():
            return

        print("üß™ B·∫Øt ƒë·∫ßu test DeepSeek agent...")
        print("=" * 50)

        # Th·ª±c hi·ªán chat session
        await client.chat_session(test_questions)

        print("=" * 50)
        print("‚úÖ Ho√†n th√†nh test DeepSeek agent")

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Ng∆∞·ªùi d√πng d·ª´ng test")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong ƒë·ª£i: {e}")
    finally:
        await client.close()


async def test_deepseek_advanced() -> None:
    """Test n√¢ng cao v·ªõi c√°c lo·∫°i c√¢u h·ªèi kh√°c nhau."""
    client = DeepSeekTestClient()

    advanced_questions = [
        "Explain the concept of quantum computing in Vietnamese",
        "Write a Python function to implement binary search with type hints",
        "Compare React vs Vue.js for frontend development",
        "What are the latest trends in AI and machine learning in 2025?",
        "T√¥i mu·ªën h·ªçc l·∫≠p tr√¨nh Python, b·∫°n c√≥ th·ªÉ t∆∞ v·∫•n l·ªô tr√¨nh kh√¥ng?",
    ]

    try:
        if not await client.connect():
            return

        print("üß™ Test n√¢ng cao DeepSeek agent...")
        print("=" * 50)

        await client.chat_session(advanced_questions)

        print("=" * 50)
        print("‚úÖ Ho√†n th√†nh test n√¢ng cao")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
    finally:
        await client.close()


def main() -> None:
    """H√†m main ƒë·ªÉ ch·∫°y test."""
    print("üî¨ DeepSeek Agent Test Client")
    print("Ch·ªçn lo·∫°i test:")
    print("1. Test c∆° b·∫£n")
    print("2. Test n√¢ng cao")
    print("3. C·∫£ hai")

    choice = input("Nh·∫≠p l·ª±a ch·ªçn (1-3): ").strip()

    if choice == "1":
        asyncio.run(test_deepseek_basic())
    elif choice == "2":
        asyncio.run(test_deepseek_advanced())
    elif choice == "3":

        async def run_both():
            await test_deepseek_basic()
            print("\n" + "=" * 50)
            await test_deepseek_advanced()

        asyncio.run(run_both())
    else:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")


if __name__ == "__main__":
    main()
