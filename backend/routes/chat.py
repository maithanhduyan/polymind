# Generated by Copilot
"""
Chat API Routes for PolyMind

REST API endpoints for chat functionality and agent management.
"""

from typing import List, Dict, Any
from fastapi import APIRouter, HTTPException

from ..agents.manager import agent_manager


router = APIRouter(prefix="/api/chat", tags=["chat"])


@router.get("/agents")
async def get_chat_agents() -> Dict[str, List[Dict[str, Any]]]:
    """
    Get available chat agents.

    Returns:
        Dict containing list of available agents with their info
    """
    agents = []

    for agent_id, agent_instance in agent_manager.agents.items():
        agent_info = agent_instance.info
        agents.append(
            {
                "id": agent_id,
                "name": agent_info["name"],
                "description": agent_info["description"],
                "type": agent_info["type"],
                "conversation_length": agent_info.get("conversation_length", 0),
            }
        )

    return {"agents": agents}


@router.get("/agents/health")
async def get_agents_health() -> Dict[str, Any]:
    """
    Kiểm tra health của tất cả agents.

    Returns:
        Dict containing health status of all agents
    """
    try:
        health_status = await agent_manager.health_check()
        return health_status
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Error checking agent health: {str(e)}"
        )


@router.get("/agents/{agent_id}")
async def get_agent_details(agent_id: str) -> Dict[str, Any]:
    """
    Get detailed information about specific agent.

    Args:
        agent_id: ID of the agent to get details for

    Returns:
        Dict containing detailed agent information

    Raises:
        HTTPException: If agent not found
    """
    agent = agent_manager.get_agent(agent_id)
    if not agent:
        raise HTTPException(status_code=404, detail=f"Agent '{agent_id}' not found")

    return {
        "id": agent_id,
        "info": agent.info,
        "conversation_length": len(agent.conversation_history),
        "capabilities": agent.info.get("capabilities", []),
    }


@router.get("/agents/{agent_id}/conversation")
async def get_agent_conversation(agent_id: str, limit: int = 10) -> Dict[str, Any]:
    """
    Get conversation history for specific agent.

    Args:
        agent_id: ID of the agent
        limit: Maximum number of messages to return

    Returns:
        Dict containing conversation history

    Raises:
        HTTPException: If agent not found
    """
    agent = agent_manager.get_agent(agent_id)
    if not agent:
        raise HTTPException(status_code=404, detail=f"Agent '{agent_id}' not found")

    # Get recent conversation
    recent_messages = (
        agent.conversation_history[-limit:] if limit > 0 else agent.conversation_history
    )

    conversation = [
        {
            "role": msg.role.value,
            "content": msg.content,
            "timestamp": msg.timestamp,
            "metadata": msg.metadata,
        }
        for msg in recent_messages
    ]

    return {
        "agent_id": agent_id,
        "total_messages": len(agent.conversation_history),
        "returned_messages": len(conversation),
        "conversation": conversation,
    }


@router.delete("/agents/{agent_id}/conversation")
async def clear_agent_conversation(agent_id: str) -> Dict[str, str]:
    """
    Clear conversation history for specific agent.

    Args:
        agent_id: ID of the agent

    Returns:
        Success message

    Raises:
        HTTPException: If agent not found
    """
    agent = agent_manager.get_agent(agent_id)
    if not agent:
        raise HTTPException(status_code=404, detail=f"Agent '{agent_id}' not found")

    # Clear conversation
    agent.clear_conversation()

    return {"message": f"Conversation cleared for agent '{agent_id}'"}


@router.get("/stats")
async def get_chat_stats() -> Dict[str, Any]:
    """
    Get chat system statistics.

    Returns:
        Dict containing system statistics
    """
    from ..websocket.connection_manager import connection_manager

    # Get agent stats
    agent_stats = {}
    for agent_id, agent in agent_manager.agents.items():
        agent_stats[agent_id] = {
            "conversation_length": len(agent.conversation_history),
            "type": agent.agent_type.value,
            "name": agent.name,
        }

    # Get connection stats
    connection_stats = connection_manager.get_connection_info()

    return {
        "agents": agent_stats,
        "connections": connection_stats,
        "total_agents": len(agent_manager.agents),
    }
