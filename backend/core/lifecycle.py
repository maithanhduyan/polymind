"""
Application Lifecycle Manager for PolyMind (Optimized)

C·∫£i ti·∫øn ch√≠nh:
1. T√≠ch h·ª£p h·ªá th·ªëng logging hi·ªáu su·∫•t cao
2. X·ª≠ l√Ω lifecycle ch·∫∑t ch·∫Ω
3. Qu·∫£n l√Ω t√†i nguy√™n t·ª± ƒë·ªông
4. X·ª≠ l√Ω l·ªói to√†n di·ªán
"""

from contextlib import asynccontextmanager
from typing import AsyncGenerator

from fastapi import FastAPI

from ..agents.manager import agent_manager
from ..config import config
from backend.utils.logger import AsyncLoggerConfig, get_async_logger
import logging

# Kh·ªüi t·∫°o logger v·ªõi c·∫•u h√¨nh n√¢ng cao
logger = get_async_logger(__name__)


class LifecycleManager:
    """
    Qu·∫£n l√Ω v√≤ng ƒë·ªùi ·ª©ng d·ª•ng v·ªõi t√≠ch h·ª£p logging m·∫°nh m·∫Ω

    C·∫£i ti·∫øn:
    - S·ª≠ d·ª•ng logger ƒë·ªìng b·ªô hi·ªáu su·∫•t cao
    - X·ª≠ l√Ω l·ªói to√†n di·ªán
    - ƒê·∫£m b·∫£o gi·∫£i ph√≥ng t√†i nguy√™n
    - T√≠ch h·ª£p c·∫•u h√¨nh logging
    """

    def __init__(self):
        self._logger = logger

    async def startup(self):
        """X·ª≠ l√Ω t√°c v·ª• kh·ªüi ƒë·ªông ·ª©ng d·ª•ng"""
        try:
            self._logger.info("üöÄ Starting PolyMind application...")

            # C·∫•u h√¨nh logging n√¢ng cao
            AsyncLoggerConfig.configure_logging(
                level=logging.INFO,
                log_file_path="polymind.log",
                max_bytes=20 * 1024 * 1024,  # 20MB
                backup_count=10,
                buffer_capacity=500,
            )

            # Ki·ªÉm tra m√¥i tr∆∞·ªùng
            await self._validate_environment()

            # Kh·ªüi t·∫°o agents
            await self._initialize_agents()

            self._logger.info("‚úÖ Application startup completed")
        except Exception as e:
            self._logger.exception("üî• Critical startup failure")
            raise

    async def shutdown(self):
        """X·ª≠ l√Ω t√°c v·ª• t·∫Øt ·ª©ng d·ª•ng"""
        try:
            self._logger.info("üõë Shutting down PolyMind application...")

            # ƒê√≥ng t·∫•t c·∫£ agents
            await agent_manager.close_all()
            self._logger.info("‚úÖ All agents closed")

            # D·ª™NG LOG LISTENER - QUAN TR·ªåNG!
            AsyncLoggerConfig.stop_listener()
            self._logger.info("‚úÖ Logging system stopped")
        except Exception as e:
            self._logger.exception("‚ö†Ô∏è Graceful shutdown failed")
        finally:
            print("‚úÖ Application shutdown completed")

    async def _validate_environment(self):
        """Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng v√† c·∫•u h√¨nh"""
        if not config.check_required_env():
            msg = "‚ö†Ô∏è Missing environment variables - Some features may be disabled"
            self._logger.warning(msg)
            print(msg)
        else:
            self._logger.info("‚úÖ Environment validation passed")

    async def _initialize_agents(self):
        """Kh·ªüi t·∫°o v√† c·∫•u h√¨nh agents"""
        try:
            await agent_manager.setup_default_agents()
            self._logger.info("‚úÖ Agent system initialized")
        except Exception as e:
            self._logger.error(f"‚ùå Agent initialization failed: {str(e)}")
            raise


# Global lifecycle manager instance
lifecycle_manager = LifecycleManager()


@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:
    """
    Qu·∫£n l√Ω v√≤ng ƒë·ªùi FastAPI v·ªõi x·ª≠ l√Ω l·ªói to√†n di·ªán

    C·∫£i ti·∫øn:
    - B·ªçc to√†n b·ªô lifecycle trong try-finally
    - X·ª≠ l√Ω exception chi ti·∫øt
    - ƒê·∫£m b·∫£o gi·∫£i ph√≥ng t√†i nguy√™n
    """
    try:
        await lifecycle_manager.startup()
        yield
    except Exception as e:
        logger.exception("üíÄ Fatal error in application lifespan")
        raise
    finally:
        await lifecycle_manager.shutdown()
