# Generated by Copilot
"""
Application Lifecycle Manager for PolyMind

Handles application startup, shutdown, and lifecycle events.
"""

from contextlib import asynccontextmanager
from typing import AsyncGenerator

from fastapi import FastAPI

from ..agents.manager import agent_manager
from ..config import config
from ..utils.logger import get_logger


class LifecycleManager:
    """
    Manages application lifecycle events and initialization.

    Features:
    - Application startup and shutdown handling
    - Agent initialization
    - Environment validation
    - Resource cleanup
    """

    def __init__(self):
        self._logger = None

    async def _get_logger(self):
        """Get or initialize logger for lifecycle manager."""
        if self._logger is None:
            self._logger = await get_logger("polymind_lifecycle")
        return self._logger

    async def startup(self):
        """Handle application startup tasks."""
        logger = await self._get_logger()
        await logger.info("🚀 Starting PolyMind application...")

        # Validate environment
        await self._validate_environment(logger)

        # Initialize agents
        await self._initialize_agents(logger)

        await logger.info("✅ Application startup completed")
        print("✅ Application startup completed")

    async def shutdown(self):
        """Handle application shutdown tasks."""
        logger = await self._get_logger()
        await logger.info("🛑 Shutting down PolyMind application...")

        # Close all agents
        await agent_manager.close_all()
        await logger.info("✅ All agents closed")

        await logger.info("✅ Application shutdown completed")
        print("✅ Application shutdown completed")

    async def _validate_environment(self, logger):
        """Validate environment variables and configuration."""
        if not config.check_required_env():
            await logger.warning(
                "⚠️  Some environment variables are missing. Some features may not work."
            )
            print(
                "⚠️  Some environment variables are missing. Some features may not work."
            )
        else:
            await logger.info("✅ All required environment variables found")

    async def _initialize_agents(self, logger):
        """Initialize and setup default agents."""
        try:
            await agent_manager.setup_default_agents()
            await logger.info("✅ Agent setup completed")
            print("✅ Agent setup completed")
        except Exception as e:
            await logger.error(f"❌ Failed to setup agents: {str(e)}")
            print(f"❌ Failed to setup agents: {str(e)}")
            raise


# Global lifecycle manager instance
lifecycle_manager = LifecycleManager()


@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:
    """
    FastAPI lifespan context manager.

    Handles application startup and shutdown using modern FastAPI pattern.
    Replaces deprecated @app.on_event decorators.

    Args:
        app: FastAPI application instance

    Yields:
        None during application runtime
    """
    # Startup
    await lifecycle_manager.startup()

    try:
        yield
    finally:
        # Shutdown
        await lifecycle_manager.shutdown()
