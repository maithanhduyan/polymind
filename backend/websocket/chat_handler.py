# Generated by Copilot
"""
Chat WebSocket Handler for PolyMind

Handles WebSocket chat logic, message processing, and agent interactions.
"""

import json
from typing import Dict, Any
from datetime import datetime
from fastapi import WebSocket, WebSocketDisconnect

from ..agents.manager import agent_manager
from ..utils.logger import get_logger
from .connection_manager import connection_manager


class ChatHandler:
    """
    Handles WebSocket chat interactions and agent communication.

    Features:
    - Message parsing and validation
    - Agent routing and communication
    - Streaming and regular responses
    - Error handling and logging
    """

    def __init__(self):
        self._logger = None

    async def _get_logger(self):
        """Get or initialize logger for chat handler."""
        if self._logger is None:
            self._logger = await get_logger("polymind_chat")
        return self._logger

    async def handle_websocket(self, websocket: WebSocket):
        """
        Main WebSocket handler for chat connections.

        Args:
            websocket: WebSocket connection instance
        """
        await connection_manager.connect(websocket)
        logger = await self._get_logger()

        try:
            while True:
                # Receive and parse message
                data = await websocket.receive_text()
                message_data = json.loads(data)

                # Process the message
                await self._process_message(message_data, websocket, logger)

        except WebSocketDisconnect:
            await logger.info("🔌 WebSocket client disconnected")
            await connection_manager.disconnect(websocket)
        except Exception as e:
            await logger.error(f"❌ WebSocket error: {str(e)}")
            await connection_manager.disconnect(websocket)

    async def _process_message(
        self, message_data: Dict[str, Any], websocket: WebSocket, logger
    ):
        """
        Process incoming chat message.

        Args:
            message_data: Parsed message data from client
            websocket: WebSocket connection
            logger: Logger instance
        """
        # Extract message information
        user_message = message_data.get("content", "")
        agent_id = message_data.get("agent", "deepseek")
        is_streaming = message_data.get("streaming", False)

        # Log incoming message
        message_preview = user_message[:100] + (
            "..." if len(user_message) > 100 else ""
        )
        await logger.info(
            f"💬 Received message for agent '{agent_id}' (streaming: {is_streaming}): {message_preview}"
        )

        try:
            if is_streaming:
                await self._handle_streaming_response(
                    user_message, agent_id, websocket, logger
                )
            else:
                await self._handle_regular_response(
                    user_message, agent_id, websocket, logger
                )

        except Exception as e:
            await logger.error(
                f"❌ Error processing message for agent '{agent_id}': {str(e)}"
            )
            await connection_manager.send_error(f"Lỗi xử lý: {str(e)}", websocket)

    async def _handle_streaming_response(
        self, user_message: str, agent_id: str, websocket: WebSocket, logger
    ):
        """
        Handle streaming response from agent.

        Args:
            user_message: User's message
            agent_id: Target agent ID
            websocket: WebSocket connection
            logger: Logger instance
        """
        # Send typing indicator
        await connection_manager.send_typing_indicator(agent_id, websocket)

        # Get agent and stream response
        agent = agent_manager.get_agent(agent_id)
        if not agent:
            await logger.error(f"❌ Agent '{agent_id}' không khả dụng")
            await connection_manager.send_error(
                f"Agent '{agent_id}' không khả dụng", websocket
            )
            return

        response_content = ""
        stream = await agent.stream_chat(user_message)

        async for chunk in stream:
            response_content += chunk
            await connection_manager.send_chunk(chunk, agent_id, websocket)
        # Send final response
        await connection_manager.send_response(
            response_content,
            agent_id,
            "deepseek-v3",  # Use fixed model name for now
            websocket,
        )

        # Log success
        await logger.info(
            f"✅ Streaming response completed for agent '{agent_id}' - {len(response_content)} characters"
        )

    async def _handle_regular_response(
        self, user_message: str, agent_id: str, websocket: WebSocket, logger
    ):
        """
        Handle regular (non-streaming) response from agent.

        Args:
            user_message: User's message
            agent_id: Target agent ID
            websocket: WebSocket connection
            logger: Logger instance
        """
        # Get response from agent manager
        response = await agent_manager.chat(user_message, agent_id)

        # Send response
        await connection_manager.send_response(
            response.content, agent_id, response.model_name, websocket
        )

        # Log success
        await logger.info(
            f"✅ Regular response completed for agent '{agent_id}' using model '{response.model_name}' - {len(response.content)} characters"
        )


# Global chat handler instance
chat_handler = ChatHandler()
