// Generated by Copilot

class PolyMindDashboard {
    constructor() {
        this.apiBaseUrl = window.location.origin;
        this.statusCheckInterval = null;
        this.logRefreshInterval = null;
        
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.checkSystemStatus();
        this.startAutoRefresh();
        
        // Hide loading overlay
        this.hideLoading();
        
        console.log('üß† PolyMind Dashboard initialized');
    }

    setupEventListeners() {
        // Clear logs button
        document.getElementById('clearLogs').addEventListener('click', () => {
            this.clearLogs();
        });

        // Refresh logs button  
        document.getElementById('refreshLogs').addEventListener('click', () => {
            this.refreshLogs();
        });

        // Window focus events for auto-refresh
        window.addEventListener('focus', () => {
            this.checkSystemStatus();
        });

        window.addEventListener('blur', () => {
            this.stopAutoRefresh();
        });
    }

    async checkSystemStatus() {
        try {
            this.showLoading();
            
            // Check API status
            const apiResponse = await this.makeRequest('/api');
            this.updateApiStatus(apiResponse.success);

            // Check detailed health
            const healthResponse = await this.makeRequest('/health/detailed');
            if (healthResponse.success) {
                this.updateDetailedStatus(healthResponse.data);
            }

            // Update main status indicator
            this.updateMainStatus(true);
            
        } catch (error) {
            console.error('‚ùå Status check failed:', error);
            this.updateMainStatus(false);
            this.updateApiStatus(false);
            this.addLogEntry('ERROR', `Status check failed: ${error.message}`);
        } finally {
            this.hideLoading();
        }
    }

    async makeRequest(endpoint) {
        try {
            const response = await fetch(`${this.apiBaseUrl}${endpoint}`);
            const data = await response.json();
            
            return {
                success: response.ok,
                data: data,
                status: response.status
            };
        } catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    }

    updateMainStatus(isOnline) {
        const indicator = document.getElementById('statusIndicator');
        const statusText = document.getElementById('statusText');
        
        if (isOnline) {
            indicator.className = 'status-indicator online';
            statusText.textContent = 'Online';
        } else {
            indicator.className = 'status-indicator offline';
            statusText.textContent = 'Offline';
        }
    }

    updateApiStatus(isHealthy) {
        const apiStatus = document.getElementById('apiStatus');
        
        if (isHealthy) {
            apiStatus.textContent = 'Healthy';
            apiStatus.className = 'status-badge healthy';
        } else {
            apiStatus.textContent = 'Error';
            apiStatus.className = 'status-badge error';
        }
    }

    updateDetailedStatus(healthData) {
        // Update uptime
        const uptimeElement = document.getElementById('uptime');
        uptimeElement.textContent = healthData.uptime || 'Unknown';

        // Update memory usage
        const memoryElement = document.getElementById('memoryUsage');
        memoryElement.textContent = healthData.memory_usage || 'Unknown';

        // Update database status
        const dbStatus = document.getElementById('dbStatus');
        if (healthData.database === 'connected') {
            dbStatus.textContent = 'Connected';
            dbStatus.className = 'status-badge healthy';
        } else {
            dbStatus.textContent = 'Disconnected';
            dbStatus.className = 'status-badge error';
        }
    }

    async testEndpoint(endpoint) {
        const responseOutput = document.getElementById('responseOutput');
        
        try {
            this.showLoading();
            responseOutput.textContent = 'Testing endpoint...';
            
            const startTime = Date.now();
            const result = await this.makeRequest(endpoint);
            const endTime = Date.now();
            const responseTime = endTime - startTime;

            // Format response for display
            const formattedResponse = {
                endpoint: endpoint,
                status: result.status || (result.success ? 200 : 500),
                response_time: `${responseTime}ms`,
                timestamp: new Date().toISOString(),
                data: result.data || { error: result.error }
            };

            responseOutput.textContent = JSON.stringify(formattedResponse, null, 2);
            
            // Add to logs
            const logLevel = result.success ? 'SUCCESS' : 'ERROR';
            const logMessage = `API test ${endpoint} - ${result.success ? 'passed' : 'failed'} (${responseTime}ms)`;
            this.addLogEntry(logLevel, logMessage);
            
        } catch (error) {
            responseOutput.textContent = JSON.stringify({
                endpoint: endpoint,
                error: error.message,
                timestamp: new Date().toISOString()
            }, null, 2);
            
            this.addLogEntry('ERROR', `API test ${endpoint} failed: ${error.message}`);
        } finally {
            this.hideLoading();
        }
    }

    addLogEntry(level, message) {
        const logsOutput = document.getElementById('logsOutput');
        const timestamp = new Date().toLocaleString('vi-VN');
        
        const logEntry = document.createElement('div');
        logEntry.className = `log-entry ${level.toLowerCase()}`;
        
        logEntry.innerHTML = `
            <span class="timestamp">[${timestamp}]</span>
            <span class="level">${level}</span>
            <span class="message">${message}</span>
        `;
        
        // Add to top of logs
        logsOutput.insertBefore(logEntry, logsOutput.firstChild);
        
        // Keep only last 100 log entries
        const logEntries = logsOutput.querySelectorAll('.log-entry');
        if (logEntries.length > 100) {
            logEntries[logEntries.length - 1].remove();
        }
    }

    clearLogs() {
        const logsOutput = document.getElementById('logsOutput');
        logsOutput.innerHTML = '<div class="log-entry info"><span class="timestamp">[' + 
            new Date().toLocaleString('vi-VN') + ']</span><span class="level">INFO</span>' +
            '<span class="message">Logs cleared by user</span></div>';
    }

    refreshLogs() {
        this.addLogEntry('INFO', 'Logs manually refreshed');
        this.checkSystemStatus();
    }

    startAutoRefresh() {
        // Check status every 30 seconds
        this.statusCheckInterval = setInterval(() => {
            this.checkSystemStatus();
        }, 30000);
        
        this.addLogEntry('INFO', 'Auto-refresh started (30s interval)');
    }

    stopAutoRefresh() {
        if (this.statusCheckInterval) {
            clearInterval(this.statusCheckInterval);
            this.statusCheckInterval = null;
        }
    }

    showLoading() {
        document.getElementById('loadingOverlay').classList.add('show');
    }

    hideLoading() {
        document.getElementById('loadingOverlay').classList.remove('show');
    }

    // Utility method for debugging
    debugInfo() {
        return {
            apiBaseUrl: this.apiBaseUrl,
            autoRefreshActive: !!this.statusCheckInterval,
            timestamp: new Date().toISOString()
        };
    }
}

// Global functions for HTML onclick handlers
window.testEndpoint = function(endpoint) {
    if (window.dashboard) {
        window.dashboard.testEndpoint(endpoint);
    }
};

// Initialize dashboard when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.dashboard = new PolyMindDashboard();
    
    // Add some demo log entries
    setTimeout(() => {
        window.dashboard.addLogEntry('INFO', 'Frontend dashboard loaded successfully');
        window.dashboard.addLogEntry('SUCCESS', 'All components initialized');
    }, 1000);
});

// Add error handling for unhandled promises
window.addEventListener('unhandledrejection', (event) => {
    console.error('üö® Unhandled promise rejection:', event.reason);
    if (window.dashboard) {
        window.dashboard.addLogEntry('ERROR', `Unhandled error: ${event.reason}`);
    }
});

// Add general error handler
window.addEventListener('error', (event) => {
    console.error('üö® JavaScript error:', event.error);
    if (window.dashboard) {
        window.dashboard.addLogEntry('ERROR', `JavaScript error: ${event.message}`);
    }
});

// Expose dashboard for debugging
window.PolyMind = {
    dashboard: null,
    version: '1.0.0',
    debug: () => window.dashboard ? window.dashboard.debugInfo() : null
};
