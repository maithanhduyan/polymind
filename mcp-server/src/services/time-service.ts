// Generated by Copilot

/**
 * Time Service Implementation - Provides system time and timezone conversion tools
 * Supports getting current time in various formats and converting between timezones
 */

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import { Service } from './base-service.js';

/**
 * Time Service Implementation - Cung cấp các công cụ thời gian và chuyển đổi múi giờ
 */
export class TimeService implements Service {
  readonly namespace = 'time';
  readonly name = 'Time Service';
  readonly version = '1.0.0';
  readonly description = 'Provides system time and timezone conversion tools';

  /**
   * Liệt kê các tools có sẵn trong Time Service
   * @returns Promise với danh sách tools
   */
  async listTools(): Promise<{ tools: Tool[] }> {
    return {
      tools: [
        {
          name: 'get_current_time',
          description: 'Get the current system time',
          inputSchema: {
            type: 'object',
            properties: {
              timezone: {
                type: 'string',
                description: 'Timezone (e.g., "UTC", "America/New_York")',
                default: 'UTC',
              },
              format: {
                type: 'string',
                description: 'Time format (ISO, locale, custom)',
                default: 'ISO',
              },
            },
          },
        },
        {
          name: 'convert_timezone',
          description: 'Convert time between timezones',
          inputSchema: {
            type: 'object',
            properties: {
              time: { type: 'string', description: 'Time to convert' },
              fromTz: { type: 'string', description: 'Source timezone' },
              toTz: { type: 'string', description: 'Target timezone' },
            },
            required: ['time', 'fromTz', 'toTz'],
          },
        },
      ] satisfies Tool[],
    };
  }

  /**
   * Gọi một tool cụ thể trong Time Service
   * @param name Tên của tool
   * @param args Tham số cho tool
   * @returns Kết quả của tool
   */
  async callTool(name: string, args: any) {
    switch (name) {
      case 'get_current_time':
        return this.getCurrentTime(args);
      case 'convert_timezone':
        return this.convertTimezone(args);
      default:
        throw new Error(`Unknown tool: ${name}`);
    }
  }

  /**
   * Lấy thời gian hiện tại theo múi giờ và format chỉ định
   * @param args Object chứa timezone và format
   * @returns Thời gian hiện tại đã format
   */
  private async getCurrentTime(args: any) {
    const { timezone = 'UTC', format = 'ISO' } = args || {};

    try {
      const now = new Date();
      let timeString: string;

      if (format === 'locale') {
        timeString = now.toLocaleString('vi-VN', {
          timeZone: timezone,
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
          timeZoneName: 'short'
        });
      } else if (format === 'ISO') {
        timeString = now.toISOString();
      } else {
        // Custom format - fallback to ISO
        timeString = now.toISOString();
      }

      return {
        content: [{
          type: 'text',
          text: `Current time: ${timeString} (${timezone})`
        }]
      };
    } catch (error) {
      throw new Error(`Failed to get current time: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Chuyển đổi thời gian giữa các múi giờ
   * @param args Object chứa time, fromTz, toTz
   * @returns Thời gian đã chuyển đổi
   */
  private async convertTimezone(args: any) {
    const { time, fromTz, toTz } = args;

    if (!time || !fromTz || !toTz) {
      throw new Error('Missing required parameters: time, fromTz, toTz');
    }

    try {
      // Parse the input time
      const inputDate = new Date(time);
      if (isNaN(inputDate.getTime())) {
        throw new Error('Invalid time format');
      }

      // Convert to target timezone
      const convertedTime = inputDate.toLocaleString('vi-VN', {
        timeZone: toTz,
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        timeZoneName: 'short'
      });

      return {
        content: [{
          type: 'text',
          text: `Converted time: ${convertedTime} (from ${fromTz} to ${toTz})`
        }]
      };
    } catch (error) {
      throw new Error(`Failed to convert timezone: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
}
