services:

  db:
    container_name: postgresql
    image: postgres:17
    ports:
      - "5432:5432"    
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres#2025
      POSTGRES_DB: postgres
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    restart: always # run as a service    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U odoo"]
      interval: 30s
      timeout: 10s
      retries: 5
      
  ollama:
    container_name: ollama    
    image: ollama/ollama:latest
    ports:
      - "11434:11434"    
    volumes:
      - ./ollama/data:/root/.ollama
      - ./ollama/init-ollama.sh:/usr/local/bin/init-ollama.sh:ro
    restart: always
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    entrypoint: ["/bin/bash", "/usr/local/bin/init-ollama.sh"]
      
  chromadb:
    container_name: chromadb  
    image: chromadb/chroma:latest
    ports:
      - "8000:8000"
    volumes:
      - ./chromadb:/data
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000    
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - ollama


# =============================================================================
# üöÄ DOCKER COMPOSE COMMANDS - Qu·∫£n l√Ω Services
# =============================================================================

# üìã All Services Management
# docker compose up -d --build                    # Start all services
# docker compose down                             # Stop all services
# docker compose restart                          # Restart all services
# docker compose ps                               # Check service status
# docker compose logs -f                          # View all logs (follow)

# üóÑÔ∏è PostgreSQL Database Service
# docker compose up -d db                         # Start PostgreSQL only
# docker compose stop db                          # Stop PostgreSQL
# docker compose restart db                       # Restart PostgreSQL
# docker compose logs -f db                       # View PostgreSQL logs

# ü§ñ Ollama AI Service
# docker compose up -d ollama                     # Start Ollama only
# docker compose stop ollama                      # Stop Ollama
# docker compose restart ollama                   # Restart Ollama
# docker compose logs -f ollama                   # View Ollama logs

# üìä ChromaDB Vector Database Service
# docker compose up -d chromadb                   # Start ChromaDB only
# docker compose stop chromadb                    # Stop ChromaDB
# docker compose restart chromadb                 # Restart ChromaDB
# docker compose logs -f chromadb                 # View ChromaDB logs

# üîß Multiple Services Combinations
# docker compose up -d db ollama                  # Start PostgreSQL + Ollama
# docker compose up -d ollama chromadb            # Start Ollama + ChromaDB
# docker compose stop db chromadb                 # Stop PostgreSQL + ChromaDB

# ü©∫ Health Checks & Debugging
# docker compose exec db pg_isready -U postgres   # Check PostgreSQL health
# docker compose exec ollama ollama list          # List Ollama models
# docker compose exec ollama ollama pull nomic-embed-text  # Pull embedding model
# curl http://localhost:11434/api/tags             # Check Ollama API
# curl http://localhost:8000/api/v1/heartbeat     # Check ChromaDB API

# ü§ñ Ollama Model Management
# docker compose exec ollama ollama pull nomic-embed-text    # Pull embedding model
# docker compose exec ollama ollama pull llama3.2:1b        # Pull small LLM model  
# docker compose exec ollama ollama list                     # List installed models
# docker compose exec ollama ollama show nomic-embed-text   # Show model details
# docker compose exec ollama ollama rm nomic-embed-text     # Remove model

# üìä Container Management
# docker compose top                              # Show running processes
# docker compose stats                            # Show resource usage
# docker compose exec db psql -U postgres         # Connect to PostgreSQL
# docker compose exec ollama bash                 # Enter Ollama container

# üßπ Cleanup Commands
# docker compose down -v                          # Stop and remove volumes
# docker compose down --rmi all                   # Stop and remove images
# docker system prune -f                          # Clean up unused Docker resources

# üîÑ Development Workflow
# docker compose up -d db                         # 1. Start database first
# docker compose up -d ollama                     # 2. Start Ollama (pull models)
# docker compose up -d chromadb                   # 3. Start ChromaDB (depends on Ollama)
# docker compose logs -f ollama                   # 4. Monitor Ollama model download

# Named volumes for data persistence
