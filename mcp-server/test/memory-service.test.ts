// Generated by Copilot

/**
 * Đơn vị test cho MemoryService
 * Chạy: npx tsx test/memory-service.test.ts
 */

import { MemoryService } from '../src/services/memory-service.js';
import fs from 'fs/promises';
import path from 'path';

const TEST_MEMORY_FILE = path.join(process.cwd(), 'test', 'memory-test.json');

async function cleanup() {
    try { await fs.unlink(TEST_MEMORY_FILE); } catch { }
}

async function main() {
    await cleanup();
    const service = new MemoryService(TEST_MEMORY_FILE);

    // Test createEntities
    console.log('== Create Entities ==');
    console.log(await service['createEntities']([
        { name: 'User', entityType: 'table', observations: ['Has id', 'Has email'] },
        { name: 'Order', entityType: 'table', observations: ['Has total', 'Has user_id'] }
    ]));

    // Test duplicate entity
    console.log(await service['createEntities']([
        { name: 'User', entityType: 'table', observations: [] }
    ]));

    // Test createRelations
    console.log('== Create Relations ==');
    console.log(await service['createRelations']([
        { from: 'Order', to: 'User', relationType: 'belongs_to' }
    ]));

    // Test invalid relation
    console.log(await service['createRelations']([
        { from: 'Order', to: 'NonExist', relationType: 'invalid' }
    ]));

    // Test addObservations
    console.log('== Add Observations ==');
    console.log(await service['addObservations']([
        { entityName: 'User', contents: ['Is active', 'Has password'] },
        { entityName: 'NonExist', contents: ['Should fail'] }
    ]));

    // Test searchNodes
    console.log('== Search Nodes ==');
    console.log(await service['searchNodes']('user'));

    // Test readGraph
    console.log('== Read Graph ==');
    console.log(await service['readGraph']());

    // Test deleteEntities
    console.log('== Delete Entities ==');
    console.log(await service['deleteEntities'](['Order']));

    // Test deleteRelations
    console.log('== Delete Relations ==');
    console.log(await service['deleteRelations']([
        { from: 'Order', to: 'User', relationType: 'belongs_to' }
    ]));

    // Test deleteObservations
    console.log('== Delete Observations ==');
    console.log(await service['deleteObservations']([
        { entityName: 'User', observations: ['Is active'] }
    ]));

    // Clean up
    await cleanup();
}

main().catch(console.error);
