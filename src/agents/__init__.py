# Generated by Copilot
"""
PolyMind Agent System - Base Agent Interface

Định nghĩa interface cơ bản cho tất cả agents trong hệ thống.
"""

from abc import ABC, abstractmethod
from typing import Dict, List, Optional, Any, AsyncGenerator
from dataclasses import dataclass
from enum import Enum
import asyncio
import time


class AgentType(Enum):
    """Loại agent trong hệ thống."""
    GENERAL = "general"
    CODING = "coding" 
    ANALYSIS = "analysis"
    CREATIVE = "creative"
    DEEPSEEK = "deepseek"


class MessageRole(Enum):
    """Vai trò trong conversation."""
    USER = "user"
    ASSISTANT = "assistant"
    SYSTEM = "system"


@dataclass
class AgentMessage:
    """Tin nhắn trong conversation."""
    role: MessageRole
    content: str
    timestamp: float
    metadata: Optional[Dict[str, Any]] = None


@dataclass 
class AgentResponse:
    """Response từ agent."""
    content: str
    agent_type: AgentType
    model_name: str
    usage: Optional[Dict[str, Any]] = None
    metadata: Optional[Dict[str, Any]] = None
    timestamp: Optional[float] = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = time.time()


class BaseAgent(ABC):
    """Base class cho tất cả agents."""
    
    def __init__(self, agent_type: AgentType, name: str, description: str):
        self.agent_type = agent_type
        self.name = name
        self.description = description
        self.conversation_history: List[AgentMessage] = []
    
    @abstractmethod
    async def chat(self, message: str, **kwargs) -> AgentResponse:
        """
        Gửi tin nhắn đến agent và nhận response.
        
        Args:
            message: Tin nhắn từ user
            **kwargs: Các tham số bổ sung
            
        Returns:
            AgentResponse với nội dung phản hồi
        """
        pass
    
    @abstractmethod
    async def stream_chat(self, message: str, **kwargs) -> AsyncGenerator[str, None]:
        """
        Stream response từ agent.
        
        Args:
            message: Tin nhắn từ user
            **kwargs: Các tham số bổ sung
            
        Yields:
            Từng phần của response
        """
        pass
    
    def add_message(self, role: MessageRole, content: str, metadata: Optional[Dict] = None):
        """Thêm tin nhắn vào lịch sử conversation."""
        message = AgentMessage(
            role=role,
            content=content,
            timestamp=time.time(),
            metadata=metadata
        )
        self.conversation_history.append(message)
    
    def clear_conversation(self):
        """Xóa lịch sử conversation."""
        self.conversation_history.clear()
    
    def get_conversation_context(self, max_messages: int = 10) -> List[Dict[str, str]]:
        """
        Lấy context conversation cho API calls.
        
        Args:
            max_messages: Số tin nhắn tối đa để lấy
            
        Returns:
            List các tin nhắn theo format API
        """
        recent_messages = self.conversation_history[-max_messages:]
        return [
            {"role": msg.role.value, "content": msg.content}
            for msg in recent_messages
        ]
    
    def get_system_prompt(self) -> str:
        """Lấy system prompt cho agent."""
        return f"You are {self.name}, {self.description}"
    
    @property
    def info(self) -> Dict[str, Any]:
        """Thông tin về agent."""
        return {
            "name": self.name,
            "type": self.agent_type.value,
            "description": self.description,
            "conversation_length": len(self.conversation_history)
        }
